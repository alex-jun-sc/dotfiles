" ============================================================================================
" 								global vim settings and functional preferences 
" ============================================================================================
" for now, it's just the leader key
" the default is already backslash.
map <SPACE> <Leader>

" nerdtree saves state in a global variable
" this ended up not working...
set sessionoptions+=globals

" mouse settings - 
" see: https://vi.stackexchange.com/questions/514/how-do-i-change-the-current-splits-width-and-height
" i'm disabling this - it's 
set mouse=n
set ttymouse=xterm2

" tabbing and indentation
set tabstop=4
set shiftwidth=4
"set expandtab

" relative numbering
set relativenumber


" functional preferences

" i think it makes more sense to center manually
set scrolloff=10
set number
set hlsearch

set ignorecase
set smartcase
" test comment Comment

" indentation - autoindent is not enough alone looks like
 set autoindent 
" set smartindent
" set smarttab

" ============================================================================================
" 								 automatically install vim-plug	
" ============================================================================================
" automatically install vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ============================================================================================
" 									vim-plug plugins
" ============================================================================================
call plug#begin('~/vimplugins')

" nerdtree - directory navigation manager
Plug 'preservim/nerdtree'
" persists sessions
Plug 'scrooloose/nerdtree-project-plugin' 

" fzd - fuzzy find through files, not file contents
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" from nir lichtman - thinking of switching to ctags
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

" found this on my own - ctrl-n just isn't enough!
Plug 'prabirshrestha/asyncomplete.vim'

" pretty color
Plug 'junegunn/seoul256.vim'
Plug 'phanviet/vim-monokai-pro'
Plug 'morhetz/gruvbox'

" what does this even do? don't remember adding this
Plug 'mhinz/vim-tree'

" session manager - let's see if this works
 Plug 'xolox/vim-session'
 Plug 'xolox/vim-misc'
" I didn't feel like reading the manpages to figure out 
" how to get these to save to not their own directory
" Plug 'tpope/vim-obsession'
" Plug 'tpope/vim-prosession'

" pretty start screen that also manages MRU files and sessions
Plug 'mhinz/vim-startify'
" it comes with a cow
" Plug 'cowsay-org/cowsay'
" Plug 'mklabs/vim-cowsay'

call plug#end()

" ============================================================================================							
" 					Formatting, autocomplete, and LSP - both stuff in vim and not
" ============================================================================================

" formatprg corresponds to the gq command, equalprg to something else
" use gqG for the entire file 
autocmd BufNewFile,BufRead *.cpp set formatprg=clang-format\  
autocmd BufNewFile,BufRead *.h set formatprg=clang-format\  

" ============================================================================================							
"		Configure session plugins - start menu and vim-session
" ============================================================================================
"    let g:startify_custom_header =
"      \ startify#center(split(system(s:header_cmd), '\n'))

let g:session_autosave = 'no' 
" note - this probably has to be fixed between systems
" helps vim-startify find sessions
let g:session_directory = '~/.vim/session'

" ============================================================================================
" 						do some stuff to enable gruvbox colors	
" ============================================================================================

" from gruvbox
" note to myself - the solution to this isn't anything in :help termguicolors 
" but configuring .tmux.conf

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX) && getenv('TERM_PROGRAM') != 'Apple_Terminal')
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif



" ============================================================================================
" 									set color	
" ============================================================================================
" i like gruvbox better 
" set termguicolors
" colorscheme monokai_pro

colo gruvbox
set background=dark

" ============================================================================================							
" 								NERDTree shortcuts
" ============================================================================================

" keep these separate because they don't use leader 

" Start NERDTree and leave the cursor in it.
" disable for now - i keep putting things in the nerdtree buffer .. 
" autocmd VimEnter * NERDTree

" this might trample other stuff - let's see ... 
" focus useful for when there is a split and you want to return to nerdtree
nnoremap <C-q> :NERDTreeFocus<CR>
nnoremap <C-t> :NERDTreeToggle<CR> 

" honestly not too sure what these two do?
" find centers the nerdtree around your current file
nnoremap <C-f> :NERDTreeFind<CR>		
" take this out - ctrl n for buffer navigation
" nnoremap <C-n> :NERDTree<CR>		



" ============================================================================================							
" 								ANY OTHER PLUGIN shortcuts
" ============================================================================================

" use leader key!

" again, might trample 
" but doing :Buffers repeatedly isn't great
" i had this mapped to c-b lol, tha doesn't work because of tmux!
" using leader keys starts now! let's start using leader shortcuts as 
" mappings for vim extensions (that are infrequently used) (but not navigation based ones)

nnoremap <Leader>f :Files<CR>
nnoremap <Leader>b :Buffers<CR>

" writing and quitting - 
" i think this makes sense, q is dangerous and x for just quit one
" i cannot take it anymore, q must be quit i do not care
nnoremap <Leader>w :w<CR>
nnoremap <Leader>qq :qa<CR>
nnoremap <Leader>x :q<CR>

" buffers


" session commands
" have to enter the name yourself
" also in the menu, file show up as SaveName.vim
" so do ,d SaveName
nnoremap <Leader>s :SaveSession
nnoremap <Leader>d :DeleteSession

" ============================================================================================							
" 								(Inside Vim) Multi-window Shortcuts	
" ============================================================================================

" wrap around windows instead of stopping
" left and right respectively
nnoremap <C-h> <C-w>W 
nnoremap <C-l> <C-w>w

" open buffer twice 
" i don't think this works
" set hidden

" rotate through buffers
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>



" ============================================================================================							
" 					Ctrl-w (resize window) shortcuts
" ============================================================================================

" stole this https://medium.com/@vinodkri/zooming-vim-window-splits-like-a-pro-d7a9317d40
" Zoom into a pane and zoom out 
noremap Zz <c-w>_ \| <c-w>\|
noremap Zo <c-w>=

" ============================================================================================							
" 					Modify vim commands to stuff I find easier
" ============================================================================================

" instantly turn off highlight
" this doesn't work - use nohl instead (noh)
" nnoremap <C-_> :nohl<CR><C-l>

" first nonblank character of line 
" noremap 0 ^

" vmap maps only in visual mode
" create custom copy and paste - i am sure there are better
" solutions for this 
" todo fix this 
vnoremap <C-c> "+y`>
inoremap <C-v> "+p

" similarly, add a command to yank directory of current buffer into clipboard
" let's see if this works
" command! YankDir let @+=expand('%:p:h')
nnoremap <Leader>y :let @+=expand('%:p:h')<CR>

" for help with copy- move bottom of page to last character in page
" disable - use line-wise visual instead (ggVG)
" noremap G G$

" remap to move cursor AFTER paste
" thinking of getting rid of this
noremap p gp
noremap P gP
noremap gp p
noremap gP P

" scrolling is too fast - slow it down
noremap <C-u> 10k
noremap <C-d> 10j

" wrapping 
" I think it makes sense to keep arrow keys as 'wrapped' operators for easy parsing
" and hjkl as regular ones
" I think I might go back on this - the way this works is that vim stores the 'current offset'
" so if you go from the prev line to this one it will jump to high indices
set wrap
set linebreak
set nolist
set paste

" you still need g0 and g$ 
noremap <Down> gj
noremap <Up> gk

" wrap h,l to hop to back of previous line, front of next line
" if this messes with plugins, get rid of h, l
" <> are arrow keys
set whichwrap+=<,h
set whichwrap+=>,l
set whichwrap+=[,] " what doess this even do?

" echo message
" let my_vimrc_loaded="[my vimrc has been loaded]"
" echo my_vimrc_loaded 

" something towards the end of the file is trampling this. 
" just throw this here for now.
set autoindent
