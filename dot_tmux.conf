#
# Reload window using pre-I
#

# ======================================================
#
#		global configuration
#
# ======================================================

# enable mouse resizing
# https://superuser.com/questions/863295/adjusting-screen-split-pane-sizes-in-tmux#:~:text=Once%20this%20mode%20is%20on,pane%20dividers%20to%20resize%20them.&text=Assuming%20your%20prefix%20key%20is%20Ctrl%2DB%20(Cmd%2DB,Press%20Ctrl%2DB%20and%20release
# set -g mode-mouse on
# set -g mouse-resize-pane on
# This causes issues with highlighting in terminal
# edit: 5.12 - just hold the shift key when doing copy-paste
# https://unix.stackexchange.com/questions/312261/tmux-mouse-scrolling-without-altering-copy-paste
set-option -g mouse on # works on ubuntu

# enable vi keybinds for copy-mode
# insert fake "vi" keyinds for starting and ending selections
# taken from https://dev.to/iggredible/the-easy-way-to-copy-text-in-tmux-319g
# note - we are moving to alacritty so this is technically no longer needed, but also doesn't hurt
setw -g mode-keys vi 
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# some stuff to make vim colors work
set -g default-terminal "xterm"

# tmux colors
set -s default-terminal "tmux-256color"
set -as terminal-overrides ",*-256color:Tc"

# change the prefix from c-b to c-a
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# make configuring this file easier
unbind R
bind R source-file ~/.tmux.conf \; display-message "Config reloaded..."

# setting that makes new windows, split panes, etc open from the same window
bind '"' split-window -c "#{pane_current_path}"
bind '%' split-window -h -c "#{pane_current_path}"

# ======================================================
#
#		pane movement
#
# ======================================================

bind-key s command-prompt -p "swap current pane with:"  "swap-pane -t '%%'"

# taken from https://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window

# join-pane - steal a pane from another window (can be from another session)
# break-pane -  break a pane from its current window to be the new destination window

# syntax: send pane to [optional session]:window
# examples: 
#   join-pane -t b_run_autopilot:6 (send current pane to window 6 from autopilot)
#   <prefix>-@ :1 (send pane to window 1 of this session)

# break-pane binding already exists
# bind-key ! - break-pane
# bind-key t command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key @ command-prompt -p "send pane to:"  "join-pane -t '%%'"

# ======================================================
#
#		harpoon-like configuration
#
# ======================================================

# facilitate reordering for harpoon
# initialize prompt with default (#S) and provide the users's input to the result
# command-prompt [-1ikNTW] [-I inputs] [-p prompts] [-t target-client] [template]
unbind r
bind r command-prompt -I "#S" "rename-session '%%'"

# custom bindings
# consider moving these to 0123 if they are less commonly used
# remember, current workflow is that "h" is the "reference session"
# for searching and notetaking ,etc
bind-key h run-shell "bash tmux_session_switch_client 0"
bind-key j run-shell "bash tmux_session_switch_client 1"
bind-key k run-shell "bash tmux_session_switch_client 2"
bind-key l run-shell "bash tmux_session_switch_client 3"
unbind ";"
bind-key ";" run-shell "bash tmux_session_switch_client 4"

# m should match harpoon
# the new "paradigm" for harpoon is to sort by session names
# choose-tree (pre-m), and the harpoon commands adhere to this behaviour
# session names, when created by the sessionizer script, are put in lowercase by default
# (choose-tree only works on lowercase names)
# see line 1078 of tmux manpage
unbind m
bind-key m choose-tree -O name

# ======================================================
#
#		plugins
#
# ======================================================

# the tmux plugin manager.
set -g @plugin 'tmux-plugins/tpm'

# exposes sane tmux options (and more?)
set -g @plugin 'tmux-plugins/tmux-sensible'

# plugin that implements sessionizer script, have yet to use 
# session manager
# https://github.com/27medkamal/tmux-session-wizard
# pre - T
set -g @plugin '27medkamal/tmux-session-wizard'

# serves as a cheap shortcut for tmux operations
# provides ui for managing sessions, windows, etc
# https://github.com/sainnhe/tmux-fzf
# pre + F
set -g @plugin 'sainnhe/tmux-fzf'

# note that prime's paradigm is implemented in local bin tmux

# try different powerline
# set -g @plugin 'erikw/tmux-powerline'

# more pretty powerline
set -g @plugin 'dracula/tmux'
set -g @dracula-show-powerline true
set -g @dracula-fixed-location "Palo Alto"
set -g @dracula-plugins "weather"
set -g @dracula-show-flags true
set -g @dracula-show-left-icon session
# set -g status-position top

# tmux-resurrect
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
set -g @plugin 'tmux-plugins/tmux-resurrect'

# this doesn't seem like it works and it's not worth the bandwidth to fix it on mac AND linux
# I should probably alias to pbcopy soon though
# enables yanking functionality within tmux
# * pre-y copies the command line
# * y (copy-mode) copies selection to system clipboard
# * Y (copy-mode) copies selection and pastes into command ilne
# may cause problems with macos
# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g set-clipboard on
# set -g @override_copy_command 'xsel -ib'
# set -g @yank_selection 'clipboard'
# set -as terminal-features ',*:clipboard'
# ======================================================
#
#		vim-tmux-navigator setup
#
# ======================================================

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

# decide whether we're in a Vim process
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# bind-key -n 'C-Space' if-shell "$is_vim" 'send-keys C-Space' 'select-pane -t:.+'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
# bind-key -T copy-mode-vi 'C-Space' select-pane -t:.+

# Other examples (of using tpm)
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# ======================================================
#
#		fin
#
# ======================================================

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# display-message "loaded tmux conf"
